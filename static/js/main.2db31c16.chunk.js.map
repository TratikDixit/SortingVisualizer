{"version":3,"sources":["SortingVisualizer/Components/Header/Header.jsx","SortingVisualizer/Components/ButtonsBar/ButtonsBar.jsx","SortingVisualizer/Components/ArrayBar/ArrayBar.jsx","SortingVisualizer/Components/RangeSliders/ArrayBarRangeSlider/ArrayBarRangeSlider.jsx","SortingVisualizer/Components/RangeSliders/AnimationSpeedRangeSlider/AnimationSpeedRangeSlider.jsx","SortingVisualizer/Components/RangeSliders/RangeSlider.jsx","SortingVisualizer/HelperFunctions.js","SortingVisualizer/SortingAlgorithms/BubbleSort/getBubbleSortAnimations.js","SortingVisualizer/SortingAlgorithms/BubbleSort/BubbleSort.js","SortingVisualizer/SortingAlgorithms/SelectionSort/getSelectionSortAnimations.js","SortingVisualizer/SortingAlgorithms/SelectionSort/SelectionSort.js","SortingVisualizer/SortingAlgorithms/InsertionSort/getInsertionSortAnimations.js","SortingVisualizer/SortingAlgorithms/InsertionSort/InsertionSort.js","SortingVisualizer/Components/Info/Info.jsx","SortingVisualizer/SortingVisualizer.jsx","index.js"],"names":["Header","className","Component","ButtonsBar","onClick","props","generateNewArray","id","bubbleSort","selectionSort","insertionSort","BarContainer","this","array","map","value","i","style","height","transform","ArrayBarSlider","withStyles","root","color","inlineSize","padding","thumb","width","backgroundColor","border","marginTop","marginLeft","active","track","borderRadius","rail","Slider","ArrayBarRangeSlider","state","numberOfArrayBars","min","max","step","defaultValue","valueLabelDisplay","marks","onChangeCommitted","onChangeArrayBarRangeSlider","AnimationSpeedSlider","AnimationSpeedRangeSlider","animationSpeed","onChangeAnimationSpeedRangeSlider","RangeSlider","right_color_bar","document","getElementsByClassName","left_color_bar","front_color_bar","back_color_bar","bottom_color_bar","getBarStyle","index","changeBackgroundColor","styleOfElement","j","length","changeBoxShadow","shadow","boxShadow","swapBars","index1","index2","styleOfElement1","styleOfElement2","tempHeight","h1","parseInt","h2","resetBarStyleDefault","setTimeout","enableButtons","getElementById","disabled","opacity","visibility","disableButtons","getBubbleSortAnimations","animations","push","BubbleSort","comparingElement1","comparingElement2","doSwap","isFinalElement","finalElement","promise1","Promise","resolve","reject","promise2","all","then","getSelectionSortAnimations","min_idx","SelectionSort","minIndexElement","getInsertionSortAnimations","key","InsertionSort","sortedTill","class","SortingVisualizer","event","setState","bind","Math","floor","random","ReactDOM","render"],"mappings":"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","file":"static/js/main.2db31c16.chunk.js","sourcesContent":["// ## This component includes an animated title / header with text \"SORTING VISUALIZER\". ## //\n\nimport React, { Component } from \"react\";\nimport \"./Header.css\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>\n        <br/>\n        Sorting Visualizer\n        <br/>\n        </h1>\n      </div>\n    );\n  }\n}\n","// ## This component includes the buttons for sorting algorithms and also generating new array. ## //\n\nimport React, { Component } from \"react\";\nimport \"./ButtonsBar.css\";\n\nexport default class ButtonsBar extends Component {\n  render() {\n    return (\n      <div className='butcon'>\n      <div className=\"buttons-bar\">\n        <button onClick={() => this.props.generateNewArray()} id=\"reset\">\n          Generate New Array\n        </button>\n        </div>\n        <br/>\n        <div className=\"buttons-bar\">\n\n        <button\n          id=\"bubbleSortButton\"\n          onClick={() => this.props.bubbleSort()}\n          className=\"buttonStyle1\"\n        >\n          Bubble Sort\n        </button>\n        <button\n          id=\"selectionSortButton\"\n          onClick={() => this.props.selectionSort()}\n          className=\"buttonStyle2\"\n        >\n          Selection Sort\n        </button>\n        <button\n          id=\"insertionSortButton\"\n          onClick={() => this.props.insertionSort()}\n          className=\"buttonStyle1\"\n        >\n          Insertion Sort\n        </button>\n      </div>\n      </div>\n    );\n  }\n}\n","// ## This component includes all the 3D bars/containers and array values. ## //\n\nimport React, { Component } from \"react\";\nimport \"./ArrayBar.css\";\n\nexport default class BarContainer extends Component {\n  render() {\n    return (\n      <div className=\"bar-container\">\n        {/* Create n bars, where n - size of the array */}\n        {this.props.array.map((value, i) => (\n          <div className=\"bar\" key={i}>\n            <div className=\"side top\"></div>\n            <div className=\"side bottom\"></div>\n            <div className=\"side right\">\n              <div\n                className=\"color-bar right-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n            <div className=\"side left\">\n              <div\n                className=\"color-bar left-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n            <div className=\"side front\">\n              <div\n                className=\"color-bar front-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n            <div className=\"side back\">\n              <div\n                className=\"color-bar back-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","// ## This component includes a range slider for changing Array Size. ## //\n\nimport React, { Component } from \"react\";\nimport { Slider, withStyles } from \"@material-ui/core\";\nimport \"./ArrayBarRangeSlider.css\";\n\nconst ArrayBarSlider = withStyles({\n  root: {\n    color: \"rgba(100, 180, 255, 1)\",\n    inlineSize: \"60%\",\n    padding: 10,\n  },\n  thumb: {\n    height: 12,\n    width: 12,\n    backgroundColor: \"#fff\",\n    border: \"2px solid cyan\",\n    marginTop: -4,\n    marginLeft: 0,\n  },\n  active: {},\n  track: {\n    height: 4,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 4,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default class ArrayBarRangeSlider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfArrayBars: this.props.numberOfArrayBars,\n    };\n  }\n  render() {\n    return (\n      <div className=\"range-slider-container\">\n        <p id=\"text-array-size\">Array Size</p>\n        <ArrayBarSlider\n          id=\"arrayBarSlider\"\n          min={2}\n          max={20}\n          step={2}\n          defaultValue={this.state.numberOfArrayBars}\n          valueLabelDisplay=\"auto\"\n          marks\n          onChangeCommitted={this.props.onChangeArrayBarRangeSlider}\n        />\n      </div>\n    );\n  }\n}\n","// ## This component includes a range slider for changing Animation Speed. ## //\n\nimport React, { Component } from \"react\";\nimport { Slider, withStyles } from \"@material-ui/core\";\nimport \"./AnimationSpeedRangeSlider.css\";\n\nconst AnimationSpeedSlider = withStyles({\n  root: {\n    color: \"rgba(100, 180, 255, 1)\",\n    inlineSize: \"60%\",\n    padding: 10,\n  },\n  thumb: {\n    height: 12,\n    width: 12,\n    backgroundColor: \"#fff\",\n    border: \"2px solid cyan\",\n    marginTop: -4,\n    marginLeft: 0,\n  },\n  active: {},\n  track: {\n    height: 4,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 4,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default class AnimationSpeedRangeSlider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationSpeed: this.props.animationSpeed,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"range-slider-container\">\n        <p id=\"text-animation-speed\">Animation Speed (ms)</p>\n        <AnimationSpeedSlider\n          id=\"animationSpeedSlider\"\n          min={10}\n          max={2000}\n          defaultValue={this.state.animationSpeed}\n          valueLabelDisplay=\"auto\"\n          onChangeCommitted={this.props.onChangeAnimationSpeedRangeSlider}\n        />\n      </div>\n    );\n  }\n}\n","// ## This component includes the containers of range sliders. ## //\n\nimport React, { Component } from \"react\";\nimport ArrayBarRangeSlider from \"./ArrayBarRangeSlider/ArrayBarRangeSlider.jsx\";\nimport AnimationSpeedRangeSlider from \"./AnimationSpeedRangeSlider/AnimationSpeedRangeSlider.jsx\";\nimport \"./RangeSlider.css\";\n\nexport default class RangeSlider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfArrayBars: this.props.numberOfArrayBars,\n      animationSpeed: this.props.animationSpeed,\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"range-slider\">\n        <div className=\"column\">\n          <ArrayBarRangeSlider\n            numberOfArrayBars={this.state.numberOfArrayBars}\n            onChangeArrayBarRangeSlider={this.props.onChangeArrayBarRangeSlider}\n          />\n        </div>\n        <div className=\"column\">\n          <AnimationSpeedRangeSlider\n            animationSpeed={this.state.animationSpeed}\n            onChangeAnimationSpeedRangeSlider={\n              this.props.onChangeAnimationSpeedRangeSlider\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","\nconst right_color_bar = document.getElementsByClassName(\"right-color-bar\");\nconst left_color_bar = document.getElementsByClassName(\"left-color-bar\");\nconst front_color_bar = document.getElementsByClassName(\"front-color-bar\");\nconst back_color_bar = document.getElementsByClassName(\"back-color-bar\");\nconst bottom_color_bar = document.getElementsByClassName(\"bottom\");\n\n// ## Helps to easily fetch all the sides of the element ## //\nexport function getBarStyle(index) {\n  const barStyle = [\n    right_color_bar[index].style,\n    left_color_bar[index].style,\n    back_color_bar[index].style,\n    front_color_bar[index].style,\n    bottom_color_bar[index].style,\n  ];\n  return barStyle;\n}\n\n// ## Changes color of all the sides of color-bar ## //\nexport function changeBackgroundColor(index, color) {\n  const styleOfElement = getBarStyle(index);\n  for (let j = 0; j < styleOfElement.length; j++)\n    styleOfElement[j].backgroundColor = color;\n}\n\n// ## Changes box-shadow of all the sides of color-bar ## //\nexport function changeBoxShadow(index, shadow) {\n  const styleOfElement = getBarStyle(index);\n  for (let j = 0; j < styleOfElement.length; j++)\n    styleOfElement[j].boxShadow = shadow;\n}\n\n// ## Swaps 2 array-bars ( Swapping heights ) ## //\nexport function swapBars(index1, index2) {\n  const styleOfElement1 = getBarStyle(index1),\n    styleOfElement2 = getBarStyle(index2);\n  for (let j = 0; j < 4; j++) {\n    const tempHeight = styleOfElement1[j].height;\n    styleOfElement1[j].height = styleOfElement2[j].height;\n    styleOfElement2[j].height = tempHeight;\n\n    const h1 = parseInt(styleOfElement1[j].height, 10),\n      h2 = parseInt(styleOfElement2[j].height, 10);\n\n    styleOfElement1[j].transform = `translateY(${70 - h1}vh)`;\n    styleOfElement2[j].transform = `translateY(${70 - h2}vh)`;\n  }\n}\n\n// ## Reset the style of all the color-bars ## //\nexport function resetBarStyleDefault(array, animationSpeed) {\n  setTimeout(() => {\n    for (let j = 0; j < array.length; j++) {\n      changeBackgroundColor(j, \"rgba(140, 211, 254,0.5)\");\n      changeBoxShadow(j, \"5px 5px 50px 5px rgba(140, 211, 254, 0.2)\");\n    }\n  }, animationSpeed);\n}\n\n// ## Returns any random value from the interval [min, max] ## //\nexport function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// ## Enables all the buttons ## //\nexport function enableButtons() {\n  document.getElementById(\"reset\").disabled = false;\n  document.getElementById(\"bubbleSortButton\").disabled = false;\n  document.getElementById(\"selectionSortButton\").disabled = false;\n  document.getElementById(\"insertionSortButton\").disabled = false;\n  document.getElementById(\"range-slider\").style.opacity = 1;\n  document.getElementById(\"range-slider\").style.visibility = \"visible\";\n}\n\n// ## Disables all the buttons ## //\nexport function disableButtons() {\n  document.getElementById(\"reset\").disabled = true;\n  document.getElementById(\"bubbleSortButton\").disabled = true;\n  document.getElementById(\"selectionSortButton\").disabled = true;\n  document.getElementById(\"insertionSortButton\").disabled = true;\n  document.getElementById(\"range-slider\").style.opacity = 0;\n  document.getElementById(\"range-slider\").style.visibility = \"hidden\";\n}\n\n","const getBubbleSortAnimations = (array) => {\n  const animations = []; // { comparingElement1, comparingElement2, doSwap, isFinalElement, finalElement }\n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // Push animation for comparing 2 elements\n      animations.push(j, j + 1, false, false, -1);\n      if (array[j] > array[j + 1]) {\n        // Swapping values\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n        // Push animation for swapping 2 values\n        animations.push(j, j + 1, true, false, -1);\n      }\n    }\n    // Here, the (array.length - 1 - i)th indexed element will be sorted. So we need to change its color.\n    // Push animation for (array.length - 1 - i)th indexed element which got its sorted position.\n    animations.push(\n      array.length - 1 - i,\n      array.length - 1 - i,\n      false,\n      true,\n      array.length - 1 - i\n    );\n  }\n  // Push animation to know that it's the end of the animation.\n  animations.push(0, 0, false, true, 0);\n\n  return animations;\n};\n\nexport default getBubbleSortAnimations;\n","import getBubbleSortAnimations from \"./getBubbleSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst BubbleSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\n  const animations = getBubbleSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 5) {\n    const comparingElement1 = animations[i];\n    const comparingElement2 = animations[i + 1];\n    const doSwap = animations[i + 2];\n    const isFinalElement = animations[i + 3];\n    const finalElement = animations[i + 4];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of comparing elements.\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(\n            finalElement,\n            \"5px 5px 50px 5px  rgba(0, 164, 86, 0.2)\"\n          );\n        } else {\n          // Changing the color-bar of element which has not taken its final sorted position yet.\n          changeBackgroundColor(comparingElement1, \"rgba(140, 211, 254, 0.6)\");\n          changeBoxShadow(comparingElement1, \"rgba(140, 211, 254, 0.2)\");\n        }\n        // From \"getBubbleSortAnimations\" function, we know that the array is sorted when finalElement is 0.\n        // Resolving the promise when the finalElement index is 0.\n        if (finalElement === 0) resolve();\n      }, (i + 5) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      // Enabling the buttons when both thepromises have been resolved.\n      .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 5) * animationSpeed);\n};\n\nexport default BubbleSort;\n","const getSelectionSortAnimations = (array) => {\n  const animations = []; // { currElement, comparingElement, minIndex, doSwap, isFinalElement, finalElement }\n\n  let min_idx;\n  for (let i = 0; i < array.length; i++) {\n    min_idx = i;\n    // Push animation for the current element which has to be sorted.\n    animations.push(i, i, min_idx, false, false, -1);\n\n    for (let j = i + 1; j < array.length; j++) {\n      // Push animation for (i)th, (j)th and (min_idx)th index elements.\n      animations.push(i, j, min_idx, false, false, -1);\n      if (array[j] < array[min_idx]) {\n        min_idx = j;\n        // Push animation for changing min_idx element.\n        animations.push(i, j, min_idx, false, false, -1);\n      }\n    }\n    if (min_idx !== i) {\n      // Swapping 2 values.\n      [array[i], array[min_idx]] = [array[min_idx], array[i]];\n      // Push animation for swapping (i)th index and (min_idx)th index elements.\n      animations.push(i, i, min_idx, true, false, -1);\n    }\n    // Here, the (i)th indexed element will be sorted. So we need to change its color.\n    // Push animation for (i)th indexed element which got its sorted position.\n    animations.push(i, i, i, false, true, i);\n  }\n\n  return animations;\n};\n\nexport default getSelectionSortAnimations;\n","import getSelectionSortAnimations from \"./getSelectionSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n\n} from \"../../HelperFunctions.js\";\n\nconst SelectionSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\n  const animations = getSelectionSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 6) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      minIndexElement = animations[i + 2],\n      doSwap = animations[i + 3],\n      isFinalElement = animations[i + 4],\n      finalElement = animations[i + 5];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of current elements.\n        changeBackgroundColor(minIndexElement, \"rgba(0,0,255, 0.9)\");\n        changeBackgroundColor(comparingElement1, \"rgba(0,0,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(minIndexElement, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, minIndexElement);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(\n            finalElement,\n            \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\"\n          );\n        } else {\n          // Changing the color-bar of elements which has not taken its final sorted position yet.\n          changeBackgroundColor(comparingElement2, \"rgba(140, 211, 254, 0.6)\");\n          changeBackgroundColor(minIndexElement, \"rgba(140, 211, 254, 0.6)\");\n        }\n\n        // From \"getSelectionSortAnimations\" function, we know that the array is sorted when finalElement is (array.length - 1).\n        // Resolving the promise when the finalElement index is (array.length - 1).\n        if (finalElement === array.length - 1) resolve();\n      }, (i + 6) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n\n      // Enabling the buttons when both the promises have been resolved.\n      .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 6) * animationSpeed);\n};\n\nexport default SelectionSort;\n","const getInsertionSortAnimations = (array) => {\n  const animations = []; // { comparingELement1, comparingElement2, doSwap, sortedTill }\n\n  // Push animation for sorting first element.\n  animations.push(0, 0, false, 0);\n\n  for (let i = 1; i < array.length; i++) {\n    let key = array[i],\n      j = i - 1;\n\n    // Push animation for comparing 2 elements\n    animations.push(i, j, false, i - 1);\n    while (j >= 0 && array[j] > key) {\n      // Swapping 2 values\n      [array[j], array[j + 1]] = [array[j + 1], array[j]];\n      // Push animation for comparing 2 elements\n      animations.push(j, j + 1, false, i);\n      // Push animation for swapping 2 elements\n      animations.push(j, j + 1, true, i);\n      j--;\n    }\n  }\n\n  // Push animation to know that it's the end of the animations.\n  animations.push(array.length - 1, array.length - 1, false, array.length - 1);\n  return animations;\n};\n\nexport default getInsertionSortAnimations;\n","import getInsertionSortAnimations from \"./getInsertionSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst InsertionSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getInsertionSortAnimations\" function.\n  const animations = getInsertionSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 4) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      doSwap = animations[i + 2],\n      sortedTill = animations[i + 3];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of comparing elements.\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(comparingElement1, \"rgba(0,0,255, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(0,0,255, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bars of the elements till sortedTill index.\n        for (let j = 0; j <= sortedTill; j++) {\n          changeBackgroundColor(j, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(j, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\n        }\n\n        // From \"getInsertionSortAnimations\" function, we know that the array is sorted when both the comparing elements are (array.length - 1).\n        // Resolving the promise when the both the comparing elemnts are (array.length - 1).\n        if (\n          comparingElement1 === array.length - 1 &&\n          comparingElement2 === array.length - 1\n        )\n          resolve();\n      }, (i + 4) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 4) * animationSpeed);\n};\n\nexport default InsertionSort;\n","import React, { Component } from \"react\";\nimport \"./Info.css\";\nexport default class Header extends Component {\n  render() {\n    return (\n        \n      <div className='mainInfo'>\n          <br/>\n          <h1>Color coding explained</h1>\n        <div class=\"scene\">\n\n        <div class=\"plane\">\n            <div class=\"cube cube--02\">\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n            </div>\n            </div>\n            <table id='info' >\n                <tr>\n                    <th>Bubble</th>\n                    <th>Selection</th>\n                    <th>Insertion</th> \n\n                </tr>\n            </table>\n            </div> \n            <div class=\"scene\">\n\n<div class=\"plane\">\n    <div class=\"cube cube--00\">\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n    </div>\n    </div>\n    <table id='info' >\n        <tr>\n            <th>Unsorted Array Element</th>\n            <th>Unsorted Array Element</th> \n            <th>Unsorted Array Element</th>\n        </tr>\n        </table>\n    </div> \n \n        <div class=\"scene\">\n        <div class=\"plane\">\n            <div class=\"cube cube--01\">\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                </div>\n            </div>\n            <table id='info' >\n                <tr>\n                    <th>-</th>\n                    <th>Main index</th> \n                    <th>-</th>\n                </tr>\n            </table>\n            </div>\n        <div class=\"scene\">\n        <div class=\"plane\">\n           <div class=\"cube cube--03\">\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n            </div>\n        </div>\n        <table id='info' >\n                <tr>\n                    <th>Consecutive array elements that are being compared</th>\n                    <th>Inner element that is compared against the main index </th> \n                    <th>First element of the unsorted subarray</th>\n                </tr>\n            </table>\n        </div>\n        <div class=\"scene\">\n        <div class=\"plane\">\n           <div class=\"cube cube--04\">\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n            </div>\n        </div>\n        <table id='info' >\n                <tr>\n                    <th>Sorted element</th>\n                    <th>Sorted element</th> \n                    <th>Sorted element</th>\n                </tr>\n            </table>\n        </div>     \n        <div class=\"scene\">\n        <div class=\"plane\">\n           <div class=\"cube cube--05\">\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n            </div>\n        </div>\n        <table id='info' >\n                <tr>\n                    <th>-</th>\n                    <th>Smallest element</th> \n                    <th>Latest swapped element</th>\n                </tr>\n            </table>\n        </div>\n        <br/>\n    </div>\n    );\n  }\n}\n\n","import React, { Component } from \"react\";\n\nimport Header from \"./Components/Header/Header.jsx\";\nimport ButtonsBar from \"./Components/ButtonsBar/ButtonsBar.jsx\";\nimport ArrayBar from \"./Components/ArrayBar/ArrayBar.jsx\";\nimport RangeSlider from \"./Components/RangeSliders/RangeSlider.jsx\";\n\nimport { randomIntFromInterval } from \"./HelperFunctions.js\";\n\nimport BubbleSort from \"./SortingAlgorithms/BubbleSort/BubbleSort.js\";\nimport SelectionSort from \"./SortingAlgorithms/SelectionSort/SelectionSort.js\";\nimport InsertionSort from \"./SortingAlgorithms/InsertionSort/InsertionSort.js\";\nimport Info from \"./Components/Info/Info.jsx\";\n\n\nimport \"./SortingVisualizer.css\";\n\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      animationSpeed: 50,\n      numberOfArrayBars: 10,\n    };\n\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.selectionSort = this.selectionSort.bind(this);\n    this.insertionSort = this.insertionSort.bind(this);\n    this.onChangeArrayBarRangeSlider = this.onChangeArrayBarRangeSlider.bind(\n      this\n    );\n    this.onChangeAnimationSpeedRangeSlider = this.onChangeAnimationSpeedRangeSlider.bind(\n      this\n    );\n  }\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  generateNewArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArrayBars; i++) {\n      array.push(randomIntFromInterval(5, 70));\n    }\n    this.setState({ array: array });\n  }\n\n\n  onChangeArrayBarRangeSlider = (event, value) => {\n    this.setState({ numberOfArrayBars: value });\n    this.generateNewArray();\n  };\n\n  onChangeAnimationSpeedRangeSlider = (event, value) => {\n    this.setState({ animationSpeed: value });\n  };\n\n  \n  bubbleSort = () => {\n    BubbleSort(this.state.array, this.state.animationSpeed);\n  };\n\n  selectionSort = () => {\n    SelectionSort(this.state.array, this.state.animationSpeed);\n  };\n\n  insertionSort = () => {\n    InsertionSort(this.state.array, this.state.animationSpeed);\n  };\n\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <Header />\n        <Info />\n\n        <ButtonsBar\n          generateNewArray={this.generateNewArray}\n          bubbleSort={this.bubbleSort}\n          selectionSort={this.selectionSort}\n          insertionSort={this.insertionSort}\n        />\n        <RangeSlider\n          numberOfArrayBars={this.state.numberOfArrayBars}\n          animationSpeed={this.state.animationSpeed}\n          onChangeArrayBarRangeSlider={this.onChangeArrayBarRangeSlider}\n          onChangeAnimationSpeedRangeSlider={\n            this.onChangeAnimationSpeedRangeSlider\n          }\n        />\n        <ArrayBar array={this.state.array} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer.jsx\";\n\n// ## Rendering SortingVisualizer Component ( Imported from path mentioned above ) ## //\nReactDOM.render(<SortingVisualizer />, document.getElementById(\"root\"));\n"],"sourceRoot":""}