{"version":3,"sources":["SortingVisualizer/Components/Header/Header.jsx","SortingVisualizer/Components/ButtonsBar/ButtonsBar.jsx","SortingVisualizer/Components/ArrayBar/ArrayBar.jsx","SortingVisualizer/Components/RangeSliders/ArrayBarRangeSlider/ArrayBarRangeSlider.jsx","SortingVisualizer/Components/RangeSliders/AnimationSpeedRangeSlider/AnimationSpeedRangeSlider.jsx","SortingVisualizer/Components/RangeSliders/RangeSlider.jsx","SortingVisualizer/HelperFunctions.js","SortingVisualizer/SortingAlgorithms/MergeSort/getMergeSortAnimations.js","SortingVisualizer/SortingAlgorithms/MergeSort/MergeSort.js","SortingVisualizer/SortingAlgorithms/BubbleSort/getBubbleSortAnimations.js","SortingVisualizer/SortingAlgorithms/BubbleSort/BubbleSort.js","SortingVisualizer/SortingAlgorithms/SelectionSort/getSelectionSortAnimations.js","SortingVisualizer/SortingAlgorithms/SelectionSort/SelectionSort.js","SortingVisualizer/SortingAlgorithms/InsertionSort/getInsertionSortAnimations.js","SortingVisualizer/SortingAlgorithms/InsertionSort/InsertionSort.js","SortingVisualizer/SortingAlgorithms/shellsort/ShellSort.js","SortingVisualizer/SortingAlgorithms/QuickSort/getQuickSortAnimations.js","SortingVisualizer/SortingAlgorithms/QuickSort/QuickSort.js","SortingVisualizer/Components/Info/Info.jsx","SortingVisualizer/SortingVisualizer.jsx","index.js"],"names":["Header","className","Component","ButtonsBar","onClick","props","generateNewArray","id","bubbleSort","selectionSort","insertionSort","quickSort","BarContainer","this","array","map","value","i","style","height","transform","ArrayBarSlider","withStyles","root","color","inlineSize","padding","thumb","width","backgroundColor","border","marginTop","marginLeft","active","track","borderRadius","rail","Slider","ArrayBarRangeSlider","state","numberOfArrayBars","min","max","step","defaultValue","valueLabelDisplay","marks","onChangeCommitted","onChangeArrayBarRangeSlider","AnimationSpeedSlider","AnimationSpeedRangeSlider","animationSpeed","onChangeAnimationSpeedRangeSlider","RangeSlider","right_color_bar","document","getElementsByClassName","left_color_bar","front_color_bar","back_color_bar","bottom_color_bar","getBarStyle","index","changeBackgroundColor","styleOfElement","j","length","changeBoxShadow","shadow","boxShadow","swapBars","index1","index2","styleOfElement1","styleOfElement2","tempHeight","h1","parseInt","h2","resetBarStyleDefault","setTimeout","enableButtons","getElementById","disabled","opacity","visibility","disableButtons","temp","animations","half","MergeSort","left","right","arr","push","shift","console","log","indexOf","merge","splice","getMergeSortAnimations","slice","BubbleSort","doSwap","getBubbleSortAnimations","comparingElement1","comparingElement2","isFinalElement","finalElement","promise1","Promise","resolve","reject","promise2","all","then","getSelectionSortAnimations","min_idx","SelectionSort","minIndexElement","getInsertionSortAnimations","key","InsertionSort","sortedTill","getShellSortAnimations","swap","quicksortLomuto","pivot","partitionLomuto","getQuickSortAnimations","QuickSort","class","SortingVisualizer","event","setState","mergeSort","shellSort","ShellSort","bind","Math","floor","random","ReactDOM","render"],"mappings":"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","file":"static/js/main.a9522f44.chunk.js","sourcesContent":["// ## This component includes an animated title / header with text \"SORTING VISUALIZER\". ## //\n\nimport React, { Component } from \"react\";\nimport \"./Header.css\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>\n        <br/>\n        Sorting Visualizer\n        <br/>\n        </h1>\n      </div>\n    );\n  }\n}\n","// ## This component includes the buttons for sorting algorithms and also generating new array. ## //\n\nimport React, { Component } from \"react\";\nimport \"./ButtonsBar.css\";\n\nexport default class ButtonsBar extends Component {\n  render() {\n    return (\n      <div className='butcon'>\n      <div className=\"buttons-bar\">\n        <button onClick={() => this.props.generateNewArray()} id=\"reset\">\n          Generate New Array\n        </button>\n        </div>\n        <br/>\n        <div className=\"buttons-bar\">\n\n        <button\n          id=\"bubbleSortButton\"\n          onClick={() => this.props.bubbleSort()}\n          className=\"buttonStyle1\"\n        >\n          Bubble Sort\n        </button>\n        <button\n          id=\"selectionSortButton\"\n          onClick={() => this.props.selectionSort()}\n          className=\"buttonStyle2\"\n        >\n          Selection Sort\n        </button>\n        <button\n          id=\"insertionSortButton\"\n          onClick={() => this.props.insertionSort()}\n          className=\"buttonStyle1\"\n        >\n          Insertion Sort\n        </button>\n\n        <button\n          id=\"bubbleSortButton\"\n          onClick={() => this.props.quickSort()}\n          className=\"buttonStyle1\"\n        >\n          Quick Sort\n        </button> \n      </div>\n      <br/>\n   \n      </div>\n    );\n  }\n}\n /*\n         <button\n          id=\"bubbleSortButton\"\n          onClick={() => this.props.mergeSort()}\n          className=\"buttonStyle1\"\n        >\n          Merge Sort\n        </button>\n        <button\n          id=\"selectionSortButton\"\n          onClick={() => this.props.mergeSort()}\n          className=\"buttonStyle1\"\n        >\n          Shell Sort\n        </button>   \n <div className=\"buttons-bar\">\n\n        <button\n          id=\"bubbleSortButton\"\n          onClick={() => this.props.shellSort()}\n          className=\"buttonStyle1\"\n        >\n          Shell Sort\n        </button>\n        <button\n          id=\"selectionSortButton\"\n          onClick={() => this.props.selectionSort()}\n          className=\"buttonStyle2\"\n        >\n          Merge Sort\n        </button>\n        <button\n          id=\"insertionSortButton\"\n          onClick={() => this.props.insertionSort()}\n          className=\"buttonStyle1\"\n        >\n          Quick Sort\n        </button>*/","// ## This component includes all the 3D bars/containers and array values. ## //\n\nimport React, { Component } from \"react\";\nimport \"./ArrayBar.css\";\n\nexport default class BarContainer extends Component {\n  render() {\n    return (\n      <div className=\"bar-container\">\n        {/* Create n bars, where n - size of the array */}\n        {this.props.array.map((value, i) => (\n          <div className=\"bar\" key={i}>\n            <div className=\"side top\"></div>\n            <div className=\"side bottom\"></div>\n            <div className=\"side right\">\n              <div\n                className=\"color-bar right-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n            <div className=\"side left\">\n              <div\n                className=\"color-bar left-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n            <div className=\"side front\">\n              <div\n                className=\"color-bar front-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n            <div className=\"side back\">\n              <div\n                className=\"color-bar back-color-bar\"\n                style={{\n                  height: `${value}vh`,\n                  transform: `translateY(${70 - value}vh)`,\n                }}\n              ></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","// ## This component includes a range slider for changing Array Size. ## //\n\nimport React, { Component } from \"react\";\nimport { Slider, withStyles } from \"@material-ui/core\";\nimport \"./ArrayBarRangeSlider.css\";\n\nconst ArrayBarSlider = withStyles({\n  root: {\n    color: \"rgba(100, 180, 255, 1)\",\n    inlineSize: \"60%\",\n    padding: 10,\n  },\n  thumb: {\n    height: 12,\n    width: 12,\n    backgroundColor: \"#fff\",\n    border: \"2px solid cyan\",\n    marginTop: -4,\n    marginLeft: 0,\n  },\n  active: {},\n  track: {\n    height: 4,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 4,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default class ArrayBarRangeSlider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfArrayBars: this.props.numberOfArrayBars,\n    };\n  }\n  render() {\n    return (\n      <div className=\"range-slider-container\">\n        <p id=\"text-array-size\">Array Size</p>\n        <ArrayBarSlider\n          id=\"arrayBarSlider\"\n          min={2}\n          max={20}\n          step={2}\n          defaultValue={this.state.numberOfArrayBars}\n          valueLabelDisplay=\"auto\"\n          marks\n          onChangeCommitted={this.props.onChangeArrayBarRangeSlider}\n        />\n      </div>\n    );\n  }\n}\n","// ## This component includes a range slider for changing Animation Speed. ## //\n\nimport React, { Component } from \"react\";\nimport { Slider, withStyles } from \"@material-ui/core\";\nimport \"./AnimationSpeedRangeSlider.css\";\n\nconst AnimationSpeedSlider = withStyles({\n  root: {\n    color: \"rgba(100, 180, 255, 1)\",\n    inlineSize: \"60%\",\n    padding: 10,\n  },\n  thumb: {\n    height: 12,\n    width: 12,\n    backgroundColor: \"#fff\",\n    border: \"2px solid cyan\",\n    marginTop: -4,\n    marginLeft: 0,\n  },\n  active: {},\n  track: {\n    height: 4,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 4,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default class AnimationSpeedRangeSlider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationSpeed: this.props.animationSpeed,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"range-slider-container\">\n        <p id=\"text-animation-speed\">Animation Speed (ms)</p>\n        <AnimationSpeedSlider\n          id=\"animationSpeedSlider\"\n          min={10}\n          max={2000}\n          defaultValue={this.state.animationSpeed}\n          valueLabelDisplay=\"auto\"\n          onChangeCommitted={this.props.onChangeAnimationSpeedRangeSlider}\n        />\n      </div>\n    );\n  }\n}\n","// ## This component includes the containers of range sliders. ## //\n\nimport React, { Component } from \"react\";\nimport ArrayBarRangeSlider from \"./ArrayBarRangeSlider/ArrayBarRangeSlider.jsx\";\nimport AnimationSpeedRangeSlider from \"./AnimationSpeedRangeSlider/AnimationSpeedRangeSlider.jsx\";\nimport \"./RangeSlider.css\";\n\nexport default class RangeSlider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfArrayBars: this.props.numberOfArrayBars,\n      animationSpeed: this.props.animationSpeed,\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"range-slider\">\n        <div className=\"column\">\n          <ArrayBarRangeSlider\n            numberOfArrayBars={this.state.numberOfArrayBars}\n            onChangeArrayBarRangeSlider={this.props.onChangeArrayBarRangeSlider}\n          />\n        </div>\n        <div className=\"column\">\n          <AnimationSpeedRangeSlider\n            animationSpeed={this.state.animationSpeed}\n            onChangeAnimationSpeedRangeSlider={\n              this.props.onChangeAnimationSpeedRangeSlider\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","\nconst right_color_bar = document.getElementsByClassName(\"right-color-bar\");\nconst left_color_bar = document.getElementsByClassName(\"left-color-bar\");\nconst front_color_bar = document.getElementsByClassName(\"front-color-bar\");\nconst back_color_bar = document.getElementsByClassName(\"back-color-bar\");\nconst bottom_color_bar = document.getElementsByClassName(\"bottom\");\n\n// ## Helps to easily fetch all the sides of the element ## //\nexport function getBarStyle(index) {\n  const barStyle = [\n    right_color_bar[index].style,\n    left_color_bar[index].style,\n    back_color_bar[index].style,\n    front_color_bar[index].style,\n    bottom_color_bar[index].style,\n  ];\n  return barStyle;\n}\n\n// ## Changes color of all the sides of color-bar ## //\nexport function changeBackgroundColor(index, color) {\n  const styleOfElement = getBarStyle(index);\n  for (let j = 0; j < styleOfElement.length; j++)\n    styleOfElement[j].backgroundColor = color;\n}\n\n// ## Changes box-shadow of all the sides of color-bar ## //\nexport function changeBoxShadow(index, shadow) {\n  const styleOfElement = getBarStyle(index);\n  for (let j = 0; j < styleOfElement.length; j++)\n    styleOfElement[j].boxShadow = shadow;\n}\n\n// ## Swaps 2 array-bars ( Swapping heights ) ## //\nexport function swapBars(index1, index2) {\n  const styleOfElement1 = getBarStyle(index1),\n    styleOfElement2 = getBarStyle(index2);\n  for (let j = 0; j < 4; j++) {\n    const tempHeight = styleOfElement1[j].height;\n    styleOfElement1[j].height = styleOfElement2[j].height;\n    styleOfElement2[j].height = tempHeight;\n\n    const h1 = parseInt(styleOfElement1[j].height, 10),\n      h2 = parseInt(styleOfElement2[j].height, 10);\n\n    styleOfElement1[j].transform = `translateY(${70 - h1}vh)`;\n    styleOfElement2[j].transform = `translateY(${70 - h2}vh)`;\n  }\n}\n\n// ## Reset the style of all the color-bars ## //\nexport function resetBarStyleDefault(array, animationSpeed) {\n  setTimeout(() => {\n    for (let j = 0; j < array.length; j++) {\n      changeBackgroundColor(j, \"rgba(140, 211, 254,0.5)\");\n      changeBoxShadow(j, \"5px 5px 50px 5px rgba(140, 211, 254, 0.2)\");\n    }\n  }, animationSpeed);\n}\n\n// ## Returns any random value from the interval [min, max] ## //\nexport function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// ## Enables all the buttons ## //\nexport function enableButtons() {\n  document.getElementById(\"reset\").disabled = false;\n  document.getElementById(\"bubbleSortButton\").disabled = false;\n  document.getElementById(\"selectionSortButton\").disabled = false;\n  document.getElementById(\"insertionSortButton\").disabled = false;\n  document.getElementById(\"range-slider\").style.opacity = 1;\n  document.getElementById(\"range-slider\").style.visibility = \"visible\";\n}\n\n// ## Disables all the buttons ## //\nexport function disableButtons() {\n  document.getElementById(\"reset\").disabled = true;\n  document.getElementById(\"bubbleSortButton\").disabled = true;\n  document.getElementById(\"selectionSortButton\").disabled = true;\n  document.getElementById(\"insertionSortButton\").disabled = true;\n  document.getElementById(\"range-slider\").style.opacity = 0;\n  document.getElementById(\"range-slider\").style.visibility = \"hidden\";\n}\n\n","\nlet temp=[];\nconst animations = []; \nlet half=0;\nfunction merge(left, right) {\n  let arr = []\n  // Break out of loop if any one of the array gets empty\n  while (left.length && right.length) {\n      // Pick the smaller among the smallest element of left and right sub arrays \n      if (left[0] < right[0]) {\n          arr.push(left.shift())  \n      } else {\n        console.log(temp, right[0], left[0], temp.indexOf(left[0]),temp.indexOf(right[0]))\n\n          arr.push(right.shift()) \n      }\n\n  }\n  // Concatenating the leftover elements\n  // (in case we didn't go through the entire left or right array)\n\n  while(left.length){\n      arr.push(left.shift())   \n  }\n  while(right.length){\n      arr.push(right.shift())   \n  }\n  return(arr)\n}\nfunction MergeSort(array){\n  half = array.length / 2\n  \n  // Base case or terminating case\n  if(array.length < 2){\n    return array \n  }\n  \n  const left = array.splice(0, half)\n  return merge(MergeSort(left),MergeSort(array))\n}\nconst getMergeSortAnimations = (array) => {\n  temp = array.slice()\n  console.log(temp)\n  console.log(MergeSort(array))\n  return animations\n};\n\nexport default getMergeSortAnimations;\n","/* eslint-disable no-loop-func */\nimport getMergeSortAnimations from \"./getMergeSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst BubbleSort = (array, animationSpeed) => {\n  disableButtons();\n\n  const animations = getMergeSortAnimations(array);\n  \n  for (let i = 0; i < animations.length; i+=1) {\n\n    const doSwap = animations[i + 0];\n    console.log(doSwap)\n   \n\n    \n     \n\n\n   \n\n  }\n\n  resetBarStyleDefault(array, (animations.length + 5) * animationSpeed);\n};\n\nexport default BubbleSort;\n","const getBubbleSortAnimations = (array) => {\n  const animations = []; \n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n\n      animations.push(j, j + 1, false, false, -1);\n      if (array[j] > array[j + 1]) {\n     \n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n       \n        animations.push(j, j + 1, true, false, -1);\n      }\n    }\n  \n    animations.push(\n      array.length - 1 - i,\n      array.length - 1 - i,\n      false,\n      true,\n      array.length - 1 - i\n    );\n  }\n  animations.push(0, 0, false, true, 0);\n  console.log('bubble')\n  return animations;\n};\n\nexport default getBubbleSortAnimations;\n","import getBubbleSortAnimations from \"./getBubbleSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst BubbleSort = (array, animationSpeed) => {\n  disableButtons();\n\n  const animations = getBubbleSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 5) {\n    const comparingElement1 = animations[i];\n    const comparingElement2 = animations[i + 1];\n    const doSwap = animations[i + 2];\n    const isFinalElement = animations[i + 3];\n    const finalElement = animations[i + 4];\n\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\n          swapBars(comparingElement1, comparingElement2);\n          console.log('SWAPPEd');\n\n        }\n      }, i * animationSpeed);\n\n      resolve();\n    });\n\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(\n            finalElement,\n            \"5px 5px 50px 5px  rgba(0, 164, 86, 0.2)\"\n          );\n        } else {\n          changeBackgroundColor(comparingElement1, \"rgba(140, 211, 254, 0.6)\");\n          changeBoxShadow(comparingElement1, \"rgba(140, 211, 254, 0.2)\");\n        }\n \n        if (finalElement === 0) resolve();\n      }, (i + 5) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2]).then(enableButtons);\n  }\n\n  resetBarStyleDefault(array, (animations.length + 5) * animationSpeed);\n};\n\nexport default BubbleSort;\n","const getSelectionSortAnimations = (array) => {\n  const animations = []; \n  let min_idx;\n  for (let i = 0; i < array.length; i++) {\n    min_idx = i;\n   \n    animations.push(i, i, min_idx, false, false, -1);\n\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push(i, j, min_idx, false, false, -1);\n      if (array[j] < array[min_idx]) {\n        min_idx = j;\n        animations.push(i, j, min_idx, false, false, -1);\n\n      }\n    }\n    if (min_idx !== i) {\n      [array[i], array[min_idx]] = [array[min_idx], array[i]];\n      animations.push(i, i, min_idx, true, false, -1);\n    }\n  \n    animations.push(i, i, i, false, true, i);\n  }\n  return animations;\n};\n\nexport default getSelectionSortAnimations;\n","import getSelectionSortAnimations from \"./getSelectionSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n\n} from \"../../HelperFunctions.js\";\n\nconst SelectionSort = (array, animationSpeed) => {\n  disableButtons();\n\n  const animations = getSelectionSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 6) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      minIndexElement = animations[i + 2],\n      doSwap = animations[i + 3],\n      isFinalElement = animations[i + 4],\n      finalElement = animations[i + 5];\n\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        changeBackgroundColor(minIndexElement, \"rgba(0,0,255, 0.9)\");\n        changeBackgroundColor(comparingElement1, \"rgba(0,0,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          changeBackgroundColor(minIndexElement, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          swapBars(comparingElement1, minIndexElement);\n        }\n      }, i * animationSpeed);\n\n      resolve();\n    });\n\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(\n            finalElement,\n            \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\"\n          );\n        } else {\n          changeBackgroundColor(comparingElement2, \"rgba(140, 211, 254, 0.6)\");\n          changeBackgroundColor(minIndexElement, \"rgba(140, 211, 254, 0.6)\");\n        }\n\n        if (finalElement === array.length - 1) resolve();\n      }, (i + 6) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(enableButtons);\n  }\n\n  resetBarStyleDefault(array, (animations.length + 6) * animationSpeed);\n};\n\nexport default SelectionSort;\n","const getInsertionSortAnimations = (array) => {\n  const animations = []; \n  animations.push(0, 0, false, 0);\n\n  for (let i = 1; i < array.length; i++) {\n    let key = array[i],\n      j = i - 1;\n\n   \n    animations.push(i, j, false, i - 1);\n    while (j >= 0 && array[j] > key) {\n      [array[j], array[j + 1]] = [array[j + 1], array[j]];\n      animations.push(j, j + 1, false, i);\n      animations.push(j, j + 1, true, i);\n      j--;\n    }\n  }\n\n  animations.push(array.length - 1, array.length - 1, false, array.length - 1);\n  console.log('INE')\n  return animations;\n};\n\nexport default getInsertionSortAnimations;\n","import getInsertionSortAnimations from \"./getInsertionSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst InsertionSort = (array, animationSpeed) => {\n  disableButtons();\n\n  const animations = getInsertionSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 4) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      doSwap = animations[i + 2],\n      sortedTill = animations[i + 3];\n\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          changeBackgroundColor(comparingElement1, \"rgba(0,0,255, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(0,0,255, 0.9)\");\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      resolve();\n    });\n\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        for (let j = 0; j <= sortedTill; j++) {\n          changeBackgroundColor(j, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(j, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\n        }\n\n    \n        if (\n          comparingElement1 === array.length - 1 &&\n          comparingElement2 === array.length - 1\n        )\n          resolve();\n      }, (i + 4) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(enableButtons);\n  }\n\n\n  resetBarStyleDefault(array, (animations.length + 4) * animationSpeed);\n};\n\nexport default InsertionSort;\n","/*import getShellSortAnimations from \"./getShellSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst ShellSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getShellSortAnimations\" function.\n  const animations = getShellSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 4) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      doSwap = animations[i + 2],\n      sortedTill = animations[i + 3];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of comparing elements.\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(comparingElement1, \"rgba(0,0,255, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(0,0,255, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bars of the elements till sortedTill index.\n        for (let j = 0; j <= sortedTill; j++) {\n          changeBackgroundColor(j, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(j, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\n        }\n\n        // From \"getShellSortAnimations\" function, we know that the array is sorted when both the comparing elements are (array.length - 1).\n        // Resolving the promise when the both the comparing elemnts are (array.length - 1).\n        if (\n          comparingElement1 === array.length - 1 &&\n          comparingElement2 === array.length - 1\n        )\n          resolve();\n      }, (i + 4) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 4) * animationSpeed);\n};\n\nexport default ShellSort;\n*/\n\nimport getShellSortAnimations from \"./getShellSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst InsertionSort = (array, animationSpeed) => {\n  disableButtons();\n\n  const animations = getShellSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 4) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      doSwap = animations[i + 2],\n      sortedTill = animations[i + 3];\n\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          changeBackgroundColor(comparingElement1, \"rgba(0,0,255, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(0,0,255, 0.9)\");\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      resolve();\n    });\n\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        for (let j = 0; j <= sortedTill; j++) {\n          changeBackgroundColor(j, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(j, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\n        }\n\n    \n        if (\n          comparingElement1 === array.length - 1 &&\n          comparingElement2 === array.length - 1\n        )\n          resolve();\n      }, (i + 4) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(enableButtons);\n  }\n\n\n  resetBarStyleDefault(array, (animations.length + 4) * animationSpeed);\n};\n\nexport default InsertionSort;\n","\nconst animations = []; \n\nfunction swap(array, i, j) {\n  var temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n  animations.push(i,j) ;\n}\n\nfunction quicksortLomuto(array, left, right) {\n  // left-pointer would be the index of the first element which is 0 and right-pointer would be the index of the last element which would be (length -1).\n  left = left || 0;\n  right = right || array.length - 1;\n\n  var pivot = partitionLomuto(array, left, right);\n\n  if (left < pivot - 1) {\n      quicksortLomuto(array, left, pivot - 1);\n  }\n\n  if (right > pivot) {\n      quicksortLomuto(array, pivot - 1, right)\n  }\n\n  return array;\n}\n\nfunction partitionLomuto(array, left, right) {\n  // Lomuto algorithm always uses the last element, array[right], for the pivot.\n  var pivot = right;\n  var i = left;\n\n  /*The logic under Lomuto is, we start from the leftmost element and keep track of index of smaller (or equal to) elements as j. While traversing, if we find a smaller element, we swap current element with arr[j]. Otherwise we ignore current element.*/\n  for (var j = left; j < right; j++) {\n      if (array[j] <= array[pivot]) {\n          swap(array, i, j);\n          i++\n      }\n  }\n  swap(array, i, j);\n  return i;\n}\n\nconst getQuickSortAnimations = (arr) => {\n  console.log(arr); //printing unsorted array\n\n  arr = quicksortLomuto(arr, 0, arr.length - 1);\n  console.log(\"Sorted array: \");\n  console.log(arr);\n  return animations;\n};\n\nexport default getQuickSortAnimations;\n","import getQuickSortAnimations from \"./getQuickSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n} from \"../../HelperFunctions.js\";\n\nconst QuickSort = (array, animationSpeed) => {\n  disableButtons();\n  console.log(array)\n  const animations = getQuickSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 2) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1];\n\n      console.log(comparingElement1,comparingElement2)\n\n\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        changeBackgroundColor(comparingElement1, \"rgba(0,0,255, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(0,0,0, 0.9)\");\n\n         \n        swapBars(comparingElement1, comparingElement2);\n        \n      }, i * animationSpeed);\n\n      resolve();\n    });\n\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n          changeBackgroundColor(comparingElement1, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(\n            comparingElement1,\n            \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\"\n          );\n\n        resolve();\n      }, (i + 6) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(enableButtons);\n  }\n\n  resetBarStyleDefault(array, (animations.length + 6) * animationSpeed);\n};\n\nexport default QuickSort;","import React, { Component } from \"react\";\nimport \"./Info.css\";\nexport default class Header extends Component {\n  render() {\n    return (\n        \n      <div className='mainInfo'>\n          <br/>\n          <h1>Color coding explained</h1>\n        <div class=\"scene\">\n\n        <div class=\"plane\">\n            <div class=\"cube cube--02\">\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n            </div>\n            </div>\n            <table id='info' >\n                <tr>\n                    <th>Bubble</th>\n                    <th>Selection</th>\n                    <th>Insertion</th> \n                    <th>Quick</th>\n                </tr>\n            </table>\n            </div> \n            <div class=\"scene\">\n\n<div class=\"plane\">\n    <div class=\"cube cube--00\">\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n        <div class=\"cube__side\"></div>\n    </div>\n    </div>\n    <table id='info' >\n        <tr>\n            <th>Unsorted Array Element</th>\n            <th>Unsorted Array Element</th> \n            <th>Unsorted Array Element</th>\n            <th>Unsorted Array Element</th>\n        </tr>\n        </table>\n    </div> \n \n        <div class=\"scene\">\n        <div class=\"plane\">\n            <div class=\"cube cube--01\">\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                <div class=\"cube__side\"></div>\n                </div>\n            </div>\n            <table id='info' >\n                <tr>\n                    <th>-</th>\n                    <th>Main index</th> \n                    <th>-</th>\n                    <th>Current index</th> \n                </tr>\n            </table>\n            </div>\n        <div class=\"scene\">\n        <div class=\"plane\">\n           <div class=\"cube cube--03\">\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n            </div>\n        </div>\n        <table id='info' >\n                <tr>\n                    <th>Consecutive array elements that are being compared</th>\n                    <th>Inner element that is compared against the main index </th> \n                    <th>First element of the unsorted subarray</th>\n                    <th>-</th>\n                </tr>\n            </table>\n        </div>\n        <div class=\"scene\">\n        <div class=\"plane\">\n           <div class=\"cube cube--04\">\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n            </div>\n        </div>\n        <table id='info' >\n                <tr>\n                    <th>Sorted element</th>\n                    <th>Sorted element</th> \n                    <th>Sorted element</th>\n                    <th>Sorted element</th>\n\n                </tr>\n            </table>\n        </div>     \n        <div class=\"scene\">\n        <div class=\"plane\">\n           <div class=\"cube cube--05\">\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n               <div class=\"cube__side\"></div>\n            </div>\n        </div>\n        <table id='info' >\n                <tr>\n                    <th>-</th>\n                    <th>Smallest element</th> \n                    <th>Latest swapped element</th>\n                    <th>Lasted swapped partition element</th>\n\n                </tr>\n            </table>\n        </div>\n        <br/>\n    </div>\n    );\n  }\n}\n\n","import React, { Component } from \"react\";\n\nimport Header from \"./Components/Header/Header.jsx\";\nimport ButtonsBar from \"./Components/ButtonsBar/ButtonsBar.jsx\";\nimport ArrayBar from \"./Components/ArrayBar/ArrayBar.jsx\";\nimport RangeSlider from \"./Components/RangeSliders/RangeSlider.jsx\";\n\nimport { randomIntFromInterval } from \"./HelperFunctions.js\";\nimport MergeSort from \"./SortingAlgorithms/MergeSort/MergeSort.js\";\nimport BubbleSort from \"./SortingAlgorithms/BubbleSort/BubbleSort.js\";\nimport SelectionSort from \"./SortingAlgorithms/SelectionSort/SelectionSort.js\";\nimport InsertionSort from \"./SortingAlgorithms/InsertionSort/InsertionSort.js\";\nimport ShellSort from \"./SortingAlgorithms/shellsort/ShellSort.js\";\nimport QuickSort from \"./SortingAlgorithms/QuickSort/QuickSort.js\";\nimport Info from \"./Components/Info/Info.jsx\";\n\n\nimport \"./SortingVisualizer.css\";\n\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      animationSpeed: 50,\n      numberOfArrayBars: 10,\n    };\n\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.quickSort = this.quickSort.bind(this);\n    this.selectionSort = this.selectionSort.bind(this);\n    this.insertionSort = this.insertionSort.bind(this);\n    this.shellSort = this.shellSort.bind(this);\n\n    this.onChangeArrayBarRangeSlider = this.onChangeArrayBarRangeSlider.bind(\n      this\n    );\n    this.onChangeAnimationSpeedRangeSlider = this.onChangeAnimationSpeedRangeSlider.bind(\n      this\n    );\n  }\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  generateNewArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArrayBars; i++) {\n      array.push(randomIntFromInterval(5, 70));\n    }\n    this.setState({ array: array });\n  }\n\n\n  onChangeArrayBarRangeSlider = (event, value) => {\n    this.setState({ numberOfArrayBars: value });\n    this.generateNewArray();\n  };\n\n  onChangeAnimationSpeedRangeSlider = (event, value) => {\n    this.setState({ animationSpeed: value });\n  };\n\n  \n  bubbleSort = () => {\n    BubbleSort(this.state.array, this.state.animationSpeed);\n  };\n    \n  quickSort = () => {\n    QuickSort(this.state.array, this.state.animationSpeed);\n  };\n  mergeSort = () => {\n    MergeSort(this.state.array, this.state.animationSpeed);\n  };\n  selectionSort = () => {\n    SelectionSort(this.state.array, this.state.animationSpeed);\n  };\n\n  insertionSort = () => {\n    InsertionSort(this.state.array, this.state.animationSpeed);\n  };\n  shellSort = () => {\n    ShellSort(this.state.array, this.state.animationSpeed);\n  };\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <Header />\n\n        <ButtonsBar\n          generateNewArray={this.generateNewArray}\n          bubbleSort={this.bubbleSort}\n          selectionSort={this.selectionSort}\n          insertionSort={this.insertionSort}\n          mergeSort={this.mergeSort}\n          shellSort={this.shellSort}\n          quickSort={this.quickSort}\n        />\n        <RangeSlider\n          numberOfArrayBars={this.state.numberOfArrayBars}\n          animationSpeed={this.state.animationSpeed}\n          onChangeArrayBarRangeSlider={this.onChangeArrayBarRangeSlider}\n          onChangeAnimationSpeedRangeSlider={\n            this.onChangeAnimationSpeedRangeSlider\n          }\n        />\n        <ArrayBar array={this.state.array} />\n        <Info />\n\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer.jsx\";\n\n// ## Rendering SortingVisualizer Component ( Imported from path mentioned above ) ## //\nReactDOM.render(<SortingVisualizer />, document.getElementById(\"root\"));\n"],"sourceRoot":""}